import Head from 'next/head'
import Link from 'next/link';
import GlobalStyles from "../styles/globals.styles"
import {
  Top, Search, SearchBox, SearchIcon, Filter, Countries, CountriesBox, Country, Flag,
  Description, Bold, Dropdown, Btn, PageNumbers, Pagination, ErrorMessage
} from '../styles/main.styles'
import { BiSearch } from "react-icons/bi"
import { IoIosArrowDown } from "react-icons/io"
import { GrFormNext, GrFormPrevious } from "react-icons/gr"
import useSWR from 'swr';
import { useState } from "react"
import Header from "../component/Header"

const fetcher = (url: RequestInfo | URL) => fetch(url).then((res) => res.json()).then((res) => JSON.parse(res));

interface CountryProps {
  name: string,
  nativeName: string,
  population: number,
  region: string
  subregion: string,
  capital: string,
  flag: string,
}

export default function Home() {
  const [search, setSearch] = useState<string>("")
  const [region, setRegion] = useState<string>("")
  const [dropdown, setDropdown] = useState<boolean>(false)
  const { data: postData, error } = useSWR<CountryProps[], Error>('/api/staticdata', fetcher)
  const data = postData || [];
  const [currentPage, SetCurrentPage] = useState<number>(1)
  const [filteredPost, settFilteredPost] = useState(data)

  const postPerPage = 13
  const endIndex = currentPage * postPerPage
  const startIndex = endIndex - postPerPage
  const currentPost = data.slice(startIndex, endIndex)
  const filteredPostData = filteredPost.slice(startIndex, endIndex)
  console.log(endIndex, startIndex, currentPost, filteredPostData)
  const pageNumbers = []
  const maxPageNumbers = Math.ceil(data.length / postPerPage)
  for (let i = 1; i <= maxPageNumbers; i++) {
    pageNumbers.push(i)
  }

  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {
    const value = e.target.value
    const firstLetter = value.charAt(0)
    const capitalLetter = firstLetter.toUpperCase()
    const otherLetters = value.slice(1)
    const countryName = capitalLetter + otherLetters
    console.log(countryName)
    if (countryName.length === 0) {
      setSearch("")
    }
    else {
      setSearch(countryName)
    }
  }

  function showDropdown() {
    setDropdown(prevValue => !prevValue)
  }

  function showCountries(name: string) {
    const post = data.filter(country => country.region === name)
    if (name === "All") {
      setRegion("")
      settFilteredPost(data)
    }
    else {
      setRegion(name)
      settFilteredPost(post)
      console.log(name)
      console.log(region)
      console.log(post)
    }
    setDropdown(false)
  }

  if (error) return <p>Failed to load</p>
  if (!data) return <p>Loading...</p>
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <GlobalStyles />
      <Header />
      <main>
        <Top>
          <Search>
            <SearchBox
              type='text' placeholder='Search for a country...' onChange={handleChange}>
            </SearchBox>
            <SearchIcon>
              <BiSearch />
            </SearchIcon>
          </Search>
          <Filter onClick={showDropdown}>
            <p>Filter by Region</p>
            <div><IoIosArrowDown /></div>
          </Filter>
          {dropdown &&
            <Dropdown>
              <li onClick={() => showCountries('All')}>All</li>
              <li onClick={() => showCountries('Africa')}>Africa</li>
              <li onClick={() => showCountries('Americas')}>America</li>
              <li onClick={() => showCountries('Asia')}>Asia</li>
              <li onClick={() => showCountries('Europe')}>Europe</li>
              <li onClick={() => showCountries('Oceania')}>Oceania</li>
            </Dropdown>
          }
        </Top>
        {search.length !== 0 && region.length !== 0?
          <Countries>
            {currentPost.map((country) => country.name.includes(search) &&
              <Link href={"/posts/" + country.name} key={country.name} >
                <Country>
                  <Flag src={country.flag} alt="flag" width={250} height={150} />
                  <Description>
                    <h2>{country.name}</h2>
                    <p><Bold>Population: </Bold>{country.population}</p>
                    <p><Bold>Region: </Bold>{country.region}</p>
                    <p><Bold>Capital: </Bold>{country.capital}</p>
                  </Description>
                </Country>
              </Link>
            )}
            <Pagination>
              <Btn onClick={() => SetCurrentPage(currentPage => currentPage - 1)}>
                <GrFormPrevious />
              </Btn>
              <PageNumbers>
                {pageNumbers.map(pageNumber =>
                  <div key={pageNumber} onClick={() => { SetCurrentPage(pageNumber) }}
                    style={{ fontWeight: pageNumber === currentPage ? 600 : 200 }}>
                    {pageNumber}
                  </div>)}
              </PageNumbers>
              <Btn onClick={() => SetCurrentPage(currentPage => currentPage + 1)}>
                <GrFormNext />
              </Btn>
            </Pagination>
          </Countries>
          :
          <CountriesBox>{
            region.length > 0 ?
              filteredPostData.map(country => country.name.includes(search) &&
                <Link href={"/posts/" + country.name} key={country.name} >
                  <Country>
                    <Flag src={country.flag} alt="flag" width={250} height={150} />
                    <Description>
                      <h2>{country.name}</h2>
                      <p><Bold>Population: </Bold>{country.population}</p>
                      <p><Bold>Region: </Bold>{country.region}</p>
                      <p><Bold>Capital: </Bold>{country.capital}</p>
                    </Description>
                  </Country>
                </Link>
              ) :
              currentPost.map(country => country.name.includes(search) &&
                <Link href={"/posts/" + country.name} key={country.name} >
                  <Country>
                    <Flag src={country.flag} alt="flag" width={250} height={150} />
                    <Description>
                      <h2>{country.name}</h2>
                      <p><Bold>Population: </Bold>{country.population}</p>
                      <p><Bold>Region: </Bold>{country.region}</p>
                      <p><Bold>Capital: </Bold>{country.capital}</p>
                    </Description>
                  </Country>
                </Link>
              )}
            <Pagination>
              <Btn onClick={() => SetCurrentPage(currentPage => currentPage - 1)}>
                <GrFormPrevious />
              </Btn>
              <PageNumbers>
                {pageNumbers.map(pageNumber =>
                  <div key={pageNumber} onClick={() => { SetCurrentPage(pageNumber) }}
                    style={{ fontWeight: pageNumber === currentPage ? 600 : 200 }}>
                    {pageNumber}
                  </div>)}
              </PageNumbers>
              <Btn onClick={() => SetCurrentPage(currentPage => currentPage + 1)}>
                <GrFormNext />
              </Btn>
            </Pagination>
          </CountriesBox>
        }
      </main>
    </>
  )
}
