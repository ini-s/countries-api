import {  HeaderStyle } from '../../styles/main.styles'
import { HiOutlineMoon } from "react-icons/hi"
import Head from 'next/head'
import GlobalStyles from "../../styles/globals.styles"
import { Link, BackBtn, DetailsBox, ImageBox, DesktopImageBox, Col, Cols, Borders } from "../../styles/[id].styles"
import { HiOutlineArrowLeft } from "react-icons/hi"
import { GetStaticProps, GetStaticPaths } from 'next';
import Header from "../../component/Header"

const fetcher = (url: RequestInfo | URL) => fetch(url).then((res) => res.json()).then((res) => JSON.parse(res));

interface CurrencyProp {
    name: string,
}

interface LanguageProp {
    name: string,
}

interface CountryProps {
    name: string,
    nativeName: string,
    population: number,
    region: string
    subregion: string,
    capital: string,
    flag: string,
    topLevelDomain: [],
    currencies: CurrencyProp[],
    languages: LanguageProp[],
    borders: []
}

export default function Post(props: { countryData: CountryProps, hasError: boolean }) {
    if (props.hasError) {
        return <h1>Error - please try another parameter</h1>
    }

    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
                <link rel="preconnect" href="https://fonts.googleapis.com" />
                <link rel="preconnect" href="https://fonts.gstatic.com" />
                <link href="https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@400;700;800;900&display=swap" rel="stylesheet" />
            </Head>
            <GlobalStyles />
            <Header />
            <main>
                <Link href="/">
                <BackBtn>
                    <HiOutlineArrowLeft />
                    <p>Back</p>
                </BackBtn>
                </Link>
                <DetailsBox>
                    <ImageBox src={props.countryData.flag} alt="flag" width={330} height={165} />
                    <DesktopImageBox src={props.countryData.flag} alt="flag" width={520} height={360} />
                    <div>
                        <h2>
                            {props.countryData.name}
                        </h2>
                        <Cols>
                            <Col>
                                <p><span>Native Name: </span>{props.countryData.nativeName}</p>
                                <p><span>Population: </span>{props.countryData.population}</p>
                                <p><span>Region: </span>{props.countryData.region}</p>
                                <p><span>Sub Region: </span>{props.countryData.subregion}</p>
                                <p><span>Capital: </span>{props.countryData.capital}</p>
                            </Col>
                            <Col>
                                <p><span>Top Level Domain: </span>{props.countryData.topLevelDomain}</p>
                                <p><span>Currencies: </span>{props.countryData.currencies?.map(currency => currency.name)}</p>
                                <p><span>Languages: </span>{props.countryData.languages?.map(language => language.name)}</p>
                            </Col>
                        </Cols>
                        <Borders>
                            <p>Border Countries:</p>
                            <div>
                                {props.countryData.borders?.map(border => <span><p>{border}</p></span>)}
                            </div>
                        </Borders>
                    </div>
                </DetailsBox>
            </main>
        </>
    )
}

async function getData() {
    const data = fetcher('http://localhost:3000/api/staticdata')
    return data
}

export const getStaticPaths: GetStaticPaths = async () => {
    const data = await getData();
    const pathsWithParams = data.map((country: CountryProps) => ({ params: { id: country.name } }))  //optional chaining data?.map ie. in the case where data may be undefined so only map the data when it has a value

    return {
        paths: pathsWithParams,
        fallback: true
    }
}

export const getStaticProps: GetStaticProps = async (context) => {
    const itemID = context.params?.id;
    console.log(itemID)
    //function to get data from the json file
    const data = await getData();
    const foundItem = data.find((country: CountryProps) => itemID === country.name);
    console.log(foundItem)
    console.log(!!foundItem)
    if (!foundItem) {
        return {
            props: { hasError: true },
        }
    }

    return {
        props: {
            countryData: foundItem
        }
    }
}